// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AliceDeposited extends ethereum.Event {
  get params(): AliceDeposited__Params {
    return new AliceDeposited__Params(this);
  }
}

export class AliceDeposited__Params {
  _event: AliceDeposited;

  constructor(event: AliceDeposited) {
    this._event = event;
  }

  get assetId(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ChannelDefunded extends ethereum.Event {
  get params(): ChannelDefunded__Params {
    return new ChannelDefunded__Params(this);
  }
}

export class ChannelDefunded__Params {
  _event: ChannelDefunded;

  constructor(event: ChannelDefunded) {
    this._event = event;
  }

  get defunder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get state(): ChannelDefundedStateStruct {
    return this._event.parameters[1].value.toTuple() as ChannelDefundedStateStruct;
  }

  get dispute(): ChannelDefundedDisputeStruct {
    return this._event.parameters[2].value.toTuple() as ChannelDefundedDisputeStruct;
  }

  get assetIds(): Array<Address> {
    return this._event.parameters[3].value.toAddressArray();
  }
}

export class ChannelDefundedStateStruct extends ethereum.Tuple {
  get channelAddress(): Address {
    return this[0].toAddress();
  }

  get alice(): Address {
    return this[1].toAddress();
  }

  get bob(): Address {
    return this[2].toAddress();
  }

  get assetIds(): Array<Address> {
    return this[3].toAddressArray();
  }

  get balances(): Array<ChannelDefundedStateBalancesStruct> {
    return this[4].toTupleArray<ChannelDefundedStateBalancesStruct>();
  }

  get processedDepositsA(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get processedDepositsB(): Array<BigInt> {
    return this[6].toBigIntArray();
  }

  get defundNonces(): Array<BigInt> {
    return this[7].toBigIntArray();
  }

  get timeout(): BigInt {
    return this[8].toBigInt();
  }

  get nonce(): BigInt {
    return this[9].toBigInt();
  }

  get merkleRoot(): Bytes {
    return this[10].toBytes();
  }
}

export class ChannelDefundedStateBalancesStruct extends ethereum.Tuple {
  get amount(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get to(): Array<Address> {
    return this[1].toAddressArray();
  }
}

export class ChannelDefundedDisputeStruct extends ethereum.Tuple {
  get channelStateHash(): Bytes {
    return this[0].toBytes();
  }

  get nonce(): BigInt {
    return this[1].toBigInt();
  }

  get merkleRoot(): Bytes {
    return this[2].toBytes();
  }

  get consensusExpiry(): BigInt {
    return this[3].toBigInt();
  }

  get defundExpiry(): BigInt {
    return this[4].toBigInt();
  }
}

export class ChannelDisputed extends ethereum.Event {
  get params(): ChannelDisputed__Params {
    return new ChannelDisputed__Params(this);
  }
}

export class ChannelDisputed__Params {
  _event: ChannelDisputed;

  constructor(event: ChannelDisputed) {
    this._event = event;
  }

  get disputer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get state(): ChannelDisputedStateStruct {
    return this._event.parameters[1].value.toTuple() as ChannelDisputedStateStruct;
  }

  get dispute(): ChannelDisputedDisputeStruct {
    return this._event.parameters[2].value.toTuple() as ChannelDisputedDisputeStruct;
  }
}

export class ChannelDisputedStateStruct extends ethereum.Tuple {
  get channelAddress(): Address {
    return this[0].toAddress();
  }

  get alice(): Address {
    return this[1].toAddress();
  }

  get bob(): Address {
    return this[2].toAddress();
  }

  get assetIds(): Array<Address> {
    return this[3].toAddressArray();
  }

  get balances(): Array<ChannelDisputedStateBalancesStruct> {
    return this[4].toTupleArray<ChannelDisputedStateBalancesStruct>();
  }

  get processedDepositsA(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get processedDepositsB(): Array<BigInt> {
    return this[6].toBigIntArray();
  }

  get defundNonces(): Array<BigInt> {
    return this[7].toBigIntArray();
  }

  get timeout(): BigInt {
    return this[8].toBigInt();
  }

  get nonce(): BigInt {
    return this[9].toBigInt();
  }

  get merkleRoot(): Bytes {
    return this[10].toBytes();
  }
}

export class ChannelDisputedStateBalancesStruct extends ethereum.Tuple {
  get amount(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get to(): Array<Address> {
    return this[1].toAddressArray();
  }
}

export class ChannelDisputedDisputeStruct extends ethereum.Tuple {
  get channelStateHash(): Bytes {
    return this[0].toBytes();
  }

  get nonce(): BigInt {
    return this[1].toBigInt();
  }

  get merkleRoot(): Bytes {
    return this[2].toBytes();
  }

  get consensusExpiry(): BigInt {
    return this[3].toBigInt();
  }

  get defundExpiry(): BigInt {
    return this[4].toBigInt();
  }
}

export class TransferDefunded extends ethereum.Event {
  get params(): TransferDefunded__Params {
    return new TransferDefunded__Params(this);
  }
}

export class TransferDefunded__Params {
  _event: TransferDefunded;

  constructor(event: TransferDefunded) {
    this._event = event;
  }

  get defunder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get state(): TransferDefundedStateStruct {
    return this._event.parameters[1].value.toTuple() as TransferDefundedStateStruct;
  }

  get dispute(): TransferDefundedDisputeStruct {
    return this._event.parameters[2].value.toTuple() as TransferDefundedDisputeStruct;
  }

  get encodedInitialState(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get encodedResolver(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get balance(): TransferDefundedBalanceStruct {
    return this._event.parameters[5].value.toTuple() as TransferDefundedBalanceStruct;
  }
}

export class TransferDefundedStateStruct extends ethereum.Tuple {
  get channelAddress(): Address {
    return this[0].toAddress();
  }

  get transferId(): Bytes {
    return this[1].toBytes();
  }

  get transferDefinition(): Address {
    return this[2].toAddress();
  }

  get initiator(): Address {
    return this[3].toAddress();
  }

  get responder(): Address {
    return this[4].toAddress();
  }

  get assetId(): Address {
    return this[5].toAddress();
  }

  get balance(): TransferDefundedStateBalanceStruct {
    return this[6].toTuple() as TransferDefundedStateBalanceStruct;
  }

  get transferTimeout(): BigInt {
    return this[7].toBigInt();
  }

  get initialStateHash(): Bytes {
    return this[8].toBytes();
  }
}

export class TransferDefundedStateBalanceStruct extends ethereum.Tuple {
  get amount(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get to(): Array<Address> {
    return this[1].toAddressArray();
  }
}

export class TransferDefundedDisputeStruct extends ethereum.Tuple {
  get transferStateHash(): Bytes {
    return this[0].toBytes();
  }

  get transferDisputeExpiry(): BigInt {
    return this[1].toBigInt();
  }

  get isDefunded(): boolean {
    return this[2].toBoolean();
  }
}

export class TransferDefundedBalanceStruct extends ethereum.Tuple {
  get amount(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get to(): Array<Address> {
    return this[1].toAddressArray();
  }
}

export class TransferDisputed extends ethereum.Event {
  get params(): TransferDisputed__Params {
    return new TransferDisputed__Params(this);
  }
}

export class TransferDisputed__Params {
  _event: TransferDisputed;

  constructor(event: TransferDisputed) {
    this._event = event;
  }

  get disputer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get state(): TransferDisputedStateStruct {
    return this._event.parameters[1].value.toTuple() as TransferDisputedStateStruct;
  }

  get dispute(): TransferDisputedDisputeStruct {
    return this._event.parameters[2].value.toTuple() as TransferDisputedDisputeStruct;
  }
}

export class TransferDisputedStateStruct extends ethereum.Tuple {
  get channelAddress(): Address {
    return this[0].toAddress();
  }

  get transferId(): Bytes {
    return this[1].toBytes();
  }

  get transferDefinition(): Address {
    return this[2].toAddress();
  }

  get initiator(): Address {
    return this[3].toAddress();
  }

  get responder(): Address {
    return this[4].toAddress();
  }

  get assetId(): Address {
    return this[5].toAddress();
  }

  get balance(): TransferDisputedStateBalanceStruct {
    return this[6].toTuple() as TransferDisputedStateBalanceStruct;
  }

  get transferTimeout(): BigInt {
    return this[7].toBigInt();
  }

  get initialStateHash(): Bytes {
    return this[8].toBytes();
  }
}

export class TransferDisputedStateBalanceStruct extends ethereum.Tuple {
  get amount(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get to(): Array<Address> {
    return this[1].toAddressArray();
  }
}

export class TransferDisputedDisputeStruct extends ethereum.Tuple {
  get transferStateHash(): Bytes {
    return this[0].toBytes();
  }

  get transferDisputeExpiry(): BigInt {
    return this[1].toBigInt();
  }

  get isDefunded(): boolean {
    return this[2].toBoolean();
  }
}

export class ChannelMastercopy__getChannelDisputeResultValue0Struct extends ethereum.Tuple {
  get channelStateHash(): Bytes {
    return this[0].toBytes();
  }

  get nonce(): BigInt {
    return this[1].toBigInt();
  }

  get merkleRoot(): Bytes {
    return this[2].toBytes();
  }

  get consensusExpiry(): BigInt {
    return this[3].toBigInt();
  }

  get defundExpiry(): BigInt {
    return this[4].toBigInt();
  }
}

export class ChannelMastercopy__getTransferDisputeResultValue0Struct extends ethereum.Tuple {
  get transferStateHash(): Bytes {
    return this[0].toBytes();
  }

  get transferDisputeExpiry(): BigInt {
    return this[1].toBigInt();
  }

  get isDefunded(): boolean {
    return this[2].toBoolean();
  }
}

export class ChannelMastercopy__getWithdrawalTransactionRecordInputWdStruct extends ethereum.Tuple {
  get channelAddress(): Address {
    return this[0].toAddress();
  }

  get assetId(): Address {
    return this[1].toAddress();
  }

  get recipient(): Address {
    return this[2].toAddress();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get nonce(): BigInt {
    return this[4].toBigInt();
  }

  get callTo(): Address {
    return this[5].toAddress();
  }

  get callData(): Bytes {
    return this[6].toBytes();
  }
}

export class ChannelMastercopy extends ethereum.SmartContract {
  static bind(address: Address): ChannelMastercopy {
    return new ChannelMastercopy("ChannelMastercopy", address);
  }

  getAlice(): Address {
    let result = super.call("getAlice", "getAlice():(address)", []);

    return result[0].toAddress();
  }

  try_getAlice(): ethereum.CallResult<Address> {
    let result = super.tryCall("getAlice", "getAlice():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBob(): Address {
    let result = super.call("getBob", "getBob():(address)", []);

    return result[0].toAddress();
  }

  try_getBob(): ethereum.CallResult<Address> {
    let result = super.tryCall("getBob", "getBob():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getChannelDispute(): ChannelMastercopy__getChannelDisputeResultValue0Struct {
    let result = super.call(
      "getChannelDispute",
      "getChannelDispute():((bytes32,uint256,bytes32,uint256,uint256))",
      []
    );

    return result[0].toTuple() as ChannelMastercopy__getChannelDisputeResultValue0Struct;
  }

  try_getChannelDispute(): ethereum.CallResult<
    ChannelMastercopy__getChannelDisputeResultValue0Struct
  > {
    let result = super.tryCall(
      "getChannelDispute",
      "getChannelDispute():((bytes32,uint256,bytes32,uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as ChannelMastercopy__getChannelDisputeResultValue0Struct
    );
  }

  getDefundNonce(assetId: Address): BigInt {
    let result = super.call(
      "getDefundNonce",
      "getDefundNonce(address):(uint256)",
      [ethereum.Value.fromAddress(assetId)]
    );

    return result[0].toBigInt();
  }

  try_getDefundNonce(assetId: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDefundNonce",
      "getDefundNonce(address):(uint256)",
      [ethereum.Value.fromAddress(assetId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getExitableAmount(assetId: Address, owner: Address): BigInt {
    let result = super.call(
      "getExitableAmount",
      "getExitableAmount(address,address):(uint256)",
      [ethereum.Value.fromAddress(assetId), ethereum.Value.fromAddress(owner)]
    );

    return result[0].toBigInt();
  }

  try_getExitableAmount(
    assetId: Address,
    owner: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getExitableAmount",
      "getExitableAmount(address,address):(uint256)",
      [ethereum.Value.fromAddress(assetId), ethereum.Value.fromAddress(owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalDepositsAlice(assetId: Address): BigInt {
    let result = super.call(
      "getTotalDepositsAlice",
      "getTotalDepositsAlice(address):(uint256)",
      [ethereum.Value.fromAddress(assetId)]
    );

    return result[0].toBigInt();
  }

  try_getTotalDepositsAlice(assetId: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalDepositsAlice",
      "getTotalDepositsAlice(address):(uint256)",
      [ethereum.Value.fromAddress(assetId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalDepositsBob(assetId: Address): BigInt {
    let result = super.call(
      "getTotalDepositsBob",
      "getTotalDepositsBob(address):(uint256)",
      [ethereum.Value.fromAddress(assetId)]
    );

    return result[0].toBigInt();
  }

  try_getTotalDepositsBob(assetId: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalDepositsBob",
      "getTotalDepositsBob(address):(uint256)",
      [ethereum.Value.fromAddress(assetId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalTransferred(assetId: Address): BigInt {
    let result = super.call(
      "getTotalTransferred",
      "getTotalTransferred(address):(uint256)",
      [ethereum.Value.fromAddress(assetId)]
    );

    return result[0].toBigInt();
  }

  try_getTotalTransferred(assetId: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalTransferred",
      "getTotalTransferred(address):(uint256)",
      [ethereum.Value.fromAddress(assetId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTransferDispute(
    transferId: Bytes
  ): ChannelMastercopy__getTransferDisputeResultValue0Struct {
    let result = super.call(
      "getTransferDispute",
      "getTransferDispute(bytes32):((bytes32,uint256,bool))",
      [ethereum.Value.fromFixedBytes(transferId)]
    );

    return result[0].toTuple() as ChannelMastercopy__getTransferDisputeResultValue0Struct;
  }

  try_getTransferDispute(
    transferId: Bytes
  ): ethereum.CallResult<
    ChannelMastercopy__getTransferDisputeResultValue0Struct
  > {
    let result = super.tryCall(
      "getTransferDispute",
      "getTransferDispute(bytes32):((bytes32,uint256,bool))",
      [ethereum.Value.fromFixedBytes(transferId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as ChannelMastercopy__getTransferDisputeResultValue0Struct
    );
  }

  getWithdrawalTransactionRecord(
    wd: ChannelMastercopy__getWithdrawalTransactionRecordInputWdStruct
  ): boolean {
    let result = super.call(
      "getWithdrawalTransactionRecord",
      "getWithdrawalTransactionRecord((address,address,address,uint256,uint256,address,bytes)):(bool)",
      [ethereum.Value.fromTuple(wd)]
    );

    return result[0].toBoolean();
  }

  try_getWithdrawalTransactionRecord(
    wd: ChannelMastercopy__getWithdrawalTransactionRecordInputWdStruct
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getWithdrawalTransactionRecord",
      "getWithdrawalTransactionRecord((address,address,address,uint256,uint256,address,bytes)):(bool)",
      [ethereum.Value.fromTuple(wd)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lock(): BigInt {
    let result = super.call("lock", "lock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lock", "lock():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class DefundChannelCall extends ethereum.Call {
  get inputs(): DefundChannelCall__Inputs {
    return new DefundChannelCall__Inputs(this);
  }

  get outputs(): DefundChannelCall__Outputs {
    return new DefundChannelCall__Outputs(this);
  }
}

export class DefundChannelCall__Inputs {
  _call: DefundChannelCall;

  constructor(call: DefundChannelCall) {
    this._call = call;
  }

  get ccs(): DefundChannelCallCcsStruct {
    return this._call.inputValues[0].value.toTuple() as DefundChannelCallCcsStruct;
  }

  get assetIds(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get indices(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class DefundChannelCall__Outputs {
  _call: DefundChannelCall;

  constructor(call: DefundChannelCall) {
    this._call = call;
  }
}

export class DefundChannelCallCcsStruct extends ethereum.Tuple {
  get channelAddress(): Address {
    return this[0].toAddress();
  }

  get alice(): Address {
    return this[1].toAddress();
  }

  get bob(): Address {
    return this[2].toAddress();
  }

  get assetIds(): Array<Address> {
    return this[3].toAddressArray();
  }

  get balances(): Array<DefundChannelCallCcsBalancesStruct> {
    return this[4].toTupleArray<DefundChannelCallCcsBalancesStruct>();
  }

  get processedDepositsA(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get processedDepositsB(): Array<BigInt> {
    return this[6].toBigIntArray();
  }

  get defundNonces(): Array<BigInt> {
    return this[7].toBigIntArray();
  }

  get timeout(): BigInt {
    return this[8].toBigInt();
  }

  get nonce(): BigInt {
    return this[9].toBigInt();
  }

  get merkleRoot(): Bytes {
    return this[10].toBytes();
  }
}

export class DefundChannelCallCcsBalancesStruct extends ethereum.Tuple {
  get amount(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get to(): Array<Address> {
    return this[1].toAddressArray();
  }
}

export class DefundTransferCall extends ethereum.Call {
  get inputs(): DefundTransferCall__Inputs {
    return new DefundTransferCall__Inputs(this);
  }

  get outputs(): DefundTransferCall__Outputs {
    return new DefundTransferCall__Outputs(this);
  }
}

export class DefundTransferCall__Inputs {
  _call: DefundTransferCall;

  constructor(call: DefundTransferCall) {
    this._call = call;
  }

  get cts(): DefundTransferCallCtsStruct {
    return this._call.inputValues[0].value.toTuple() as DefundTransferCallCtsStruct;
  }

  get encodedInitialTransferState(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get encodedTransferResolver(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get responderSignature(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class DefundTransferCall__Outputs {
  _call: DefundTransferCall;

  constructor(call: DefundTransferCall) {
    this._call = call;
  }
}

export class DefundTransferCallCtsStruct extends ethereum.Tuple {
  get channelAddress(): Address {
    return this[0].toAddress();
  }

  get transferId(): Bytes {
    return this[1].toBytes();
  }

  get transferDefinition(): Address {
    return this[2].toAddress();
  }

  get initiator(): Address {
    return this[3].toAddress();
  }

  get responder(): Address {
    return this[4].toAddress();
  }

  get assetId(): Address {
    return this[5].toAddress();
  }

  get balance(): DefundTransferCallCtsBalanceStruct {
    return this[6].toTuple() as DefundTransferCallCtsBalanceStruct;
  }

  get transferTimeout(): BigInt {
    return this[7].toBigInt();
  }

  get initialStateHash(): Bytes {
    return this[8].toBytes();
  }
}

export class DefundTransferCallCtsBalanceStruct extends ethereum.Tuple {
  get amount(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get to(): Array<Address> {
    return this[1].toAddressArray();
  }
}

export class DepositAliceCall extends ethereum.Call {
  get inputs(): DepositAliceCall__Inputs {
    return new DepositAliceCall__Inputs(this);
  }

  get outputs(): DepositAliceCall__Outputs {
    return new DepositAliceCall__Outputs(this);
  }
}

export class DepositAliceCall__Inputs {
  _call: DepositAliceCall;

  constructor(call: DepositAliceCall) {
    this._call = call;
  }

  get assetId(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositAliceCall__Outputs {
  _call: DepositAliceCall;

  constructor(call: DepositAliceCall) {
    this._call = call;
  }
}

export class DisputeChannelCall extends ethereum.Call {
  get inputs(): DisputeChannelCall__Inputs {
    return new DisputeChannelCall__Inputs(this);
  }

  get outputs(): DisputeChannelCall__Outputs {
    return new DisputeChannelCall__Outputs(this);
  }
}

export class DisputeChannelCall__Inputs {
  _call: DisputeChannelCall;

  constructor(call: DisputeChannelCall) {
    this._call = call;
  }

  get ccs(): DisputeChannelCallCcsStruct {
    return this._call.inputValues[0].value.toTuple() as DisputeChannelCallCcsStruct;
  }

  get aliceSignature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get bobSignature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class DisputeChannelCall__Outputs {
  _call: DisputeChannelCall;

  constructor(call: DisputeChannelCall) {
    this._call = call;
  }
}

export class DisputeChannelCallCcsStruct extends ethereum.Tuple {
  get channelAddress(): Address {
    return this[0].toAddress();
  }

  get alice(): Address {
    return this[1].toAddress();
  }

  get bob(): Address {
    return this[2].toAddress();
  }

  get assetIds(): Array<Address> {
    return this[3].toAddressArray();
  }

  get balances(): Array<DisputeChannelCallCcsBalancesStruct> {
    return this[4].toTupleArray<DisputeChannelCallCcsBalancesStruct>();
  }

  get processedDepositsA(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get processedDepositsB(): Array<BigInt> {
    return this[6].toBigIntArray();
  }

  get defundNonces(): Array<BigInt> {
    return this[7].toBigIntArray();
  }

  get timeout(): BigInt {
    return this[8].toBigInt();
  }

  get nonce(): BigInt {
    return this[9].toBigInt();
  }

  get merkleRoot(): Bytes {
    return this[10].toBytes();
  }
}

export class DisputeChannelCallCcsBalancesStruct extends ethereum.Tuple {
  get amount(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get to(): Array<Address> {
    return this[1].toAddressArray();
  }
}

export class DisputeTransferCall extends ethereum.Call {
  get inputs(): DisputeTransferCall__Inputs {
    return new DisputeTransferCall__Inputs(this);
  }

  get outputs(): DisputeTransferCall__Outputs {
    return new DisputeTransferCall__Outputs(this);
  }
}

export class DisputeTransferCall__Inputs {
  _call: DisputeTransferCall;

  constructor(call: DisputeTransferCall) {
    this._call = call;
  }

  get cts(): DisputeTransferCallCtsStruct {
    return this._call.inputValues[0].value.toTuple() as DisputeTransferCallCtsStruct;
  }

  get merkleProofData(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }
}

export class DisputeTransferCall__Outputs {
  _call: DisputeTransferCall;

  constructor(call: DisputeTransferCall) {
    this._call = call;
  }
}

export class DisputeTransferCallCtsStruct extends ethereum.Tuple {
  get channelAddress(): Address {
    return this[0].toAddress();
  }

  get transferId(): Bytes {
    return this[1].toBytes();
  }

  get transferDefinition(): Address {
    return this[2].toAddress();
  }

  get initiator(): Address {
    return this[3].toAddress();
  }

  get responder(): Address {
    return this[4].toAddress();
  }

  get assetId(): Address {
    return this[5].toAddress();
  }

  get balance(): DisputeTransferCallCtsBalanceStruct {
    return this[6].toTuple() as DisputeTransferCallCtsBalanceStruct;
  }

  get transferTimeout(): BigInt {
    return this[7].toBigInt();
  }

  get initialStateHash(): Bytes {
    return this[8].toBytes();
  }
}

export class DisputeTransferCallCtsBalanceStruct extends ethereum.Tuple {
  get amount(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get to(): Array<Address> {
    return this[1].toAddressArray();
  }
}

export class ExitCall extends ethereum.Call {
  get inputs(): ExitCall__Inputs {
    return new ExitCall__Inputs(this);
  }

  get outputs(): ExitCall__Outputs {
    return new ExitCall__Outputs(this);
  }
}

export class ExitCall__Inputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }

  get assetId(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ExitCall__Outputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}

export class SetupCall extends ethereum.Call {
  get inputs(): SetupCall__Inputs {
    return new SetupCall__Inputs(this);
  }

  get outputs(): SetupCall__Outputs {
    return new SetupCall__Outputs(this);
  }
}

export class SetupCall__Inputs {
  _call: SetupCall;

  constructor(call: SetupCall) {
    this._call = call;
  }

  get _alice(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _bob(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetupCall__Outputs {
  _call: SetupCall;

  constructor(call: SetupCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get wd(): WithdrawCallWdStruct {
    return this._call.inputValues[0].value.toTuple() as WithdrawCallWdStruct;
  }

  get aliceSignature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get bobSignature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCallWdStruct extends ethereum.Tuple {
  get channelAddress(): Address {
    return this[0].toAddress();
  }

  get assetId(): Address {
    return this[1].toAddress();
  }

  get recipient(): Address {
    return this[2].toAddress();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get nonce(): BigInt {
    return this[4].toBigInt();
  }

  get callTo(): Address {
    return this[5].toAddress();
  }

  get callData(): Bytes {
    return this[6].toBytes();
  }
}
